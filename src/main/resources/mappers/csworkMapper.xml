<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.javaclassS14.dao.CsworkDAO">
    
    <!-- 지점 목록 가져오기 -->
    <select id="getBranchList" resultType="com.spring.javaclassS14.vo.BranchVO">
        SELECT * FROM branch_store ORDER BY branchStoreIdx;
    </select>
    
    <!-- 지점 이름으로 검색 -->
    <select id="getBranchSearch" resultType="com.spring.javaclassS14.vo.BranchVO">
        SELECT * FROM branch_store WHERE branchName = #{branchName};
    </select>
    
    <!-- 인기 뉴스 찾기 -->
    <select id="findTopNews" resultType="com.spring.javaclassS14.vo.SaveInterestVO">
        SELECT partUrl, COUNT(partUrl) AS urlCnt 
        FROM bookmark 
        GROUP BY partUrl 
        ORDER BY urlCnt DESC 
        LIMIT #{limit};
    </select>
    
    <!-- 공지사항 목록 가져오기 -->
    <select id="getNoticeList" resultType="com.spring.javaclassS14.vo.CsworkVO">
        SELECT * FROM notice WHERE noticeStatus = 'y' ORDER BY noticeIdx;
    </select>
    
    <!-- 공지사항 정보 가져오기 -->
    <select id="getNoticeInfo" resultType="com.spring.javaclassS14.vo.CsworkVO">
        SELECT * FROM notice WHERE noticeIdx = #{noticeIdx} AND noticeStatus = 'y';
    </select>
    
    <!-- FAQ 목록 가져오기 -->
    <select id="getFaqList" resultType="com.spring.javaclassS14.vo.CsworkVO">
        SELECT *, (SELECT COUNT(*) FROM faq GROUP BY faqCategory) AS faqCategoryCnt 
        FROM faq ORDER BY faqIdx, faqCategory;
    </select>
    
    <select id="getQnaList" resultType="com.spring.javaclassS14.vo.CsworkVO">
        SELECT *, (SELECT COUNT(*) FROM qna where qnaAnswerFlag = 'n') AS qnaAnswerNo 
        FROM qna ORDER BY qnaIdx, qnaCategory;
    </select>
    
    <select id="getPurchaseList" resultType="com.spring.javaclassS14.vo.BranchVO">
        SELECT * from branch_purchase_product order by bppName;
    </select>
    
    <!-- FAQ 검색 목록 가져오기 -->
    <select id="getFaqSearchList" resultType="com.spring.javaclassS14.vo.CsworkVO">
        SELECT *, 
               (SELECT COUNT(*) 
                FROM faq 
                WHERE faqCategory=#{faqCategory} 
                AND faqContent LIKE CONCAT('%',#{keyword},'%')) AS faqSearchCnt 
        FROM faq 
        ORDER BY faqIdx, faqCategory;
    </select>
    
    <select id="getAirStation" resultType="com.spring.javaclassS14.vo.AirVO">
	    (SELECT * FROM station_list WHERE stationAddress LIKE '%서울%' LIMIT 1)
	    UNION
	    (SELECT * FROM station_list WHERE stationAddress LIKE '%청주%' LIMIT 1)
	    UNION
	    (SELECT * FROM station_list WHERE stationAddress NOT LIKE '%서울%' AND stationAddress NOT LIKE '%청주%' ORDER BY RAND() LIMIT 4)
	    order by stationIdx
	</select>
        
    <select id="findById" parameterType="int" resultType="com.spring.javaclassS14.vo.CsworkVO">
        SELECT * FROM qna WHERE qnaIdx = #{qnaIdx}
    </select>
    
    <!-- QnA 조회 쿼리 -->
    <select id="getQnaById" parameterType="int" resultType="com.spring.javaclassS14.vo.CsworkVO">
        SELECT * FROM qna WHERE qnaIdx = #{qnaIdx}
    </select>
    
    
    
    <!-- QnA 입력 -->
    <insert id="insertQnaForGuest">
		INSERT INTO qna 
		VALUES(DEFAULT, #{qnaVO.userId}, #{qnaVO.qnaTitle}, #{qnaVO.qnaContent}, DEFAULT, DEFAULT, DEFAULT, DEFAULT, #{qnaVO.qnaCategory}, #{qnaVO.email});
    </insert>
    <insert id="insertQnaForMember">
        INSERT INTO qna 
        VALUES(DEFAULT, #{qnaVO.userId}, #{qnaVO.qnaTitle}, #{qnaVO.qnaContent}, DEFAULT, DEFAULT, DEFAULT, DEFAULT, #{qnaVO.qnaCategory}, DEFAULT);
    </insert>
    
    <!-- FAQ 입력 -->
    <insert id="setFaqInput">
        INSERT INTO faq 
        VALUES(DEFAULT, #{faqVO.faqCategory}, #{faqVO.faqTitle}, #{faqVO.Content}, DEFAULT, #{faqVO.faqStatus});
    </insert>
    
    <!-- 지점 입력 -->
    <insert id="setBranchInput">
        INSERT INTO branch_store VALUES (default, #{branchVO.branchName}, #{branchVO.branchTel}, #{branchVO.branchLocation}, #{branchVO.latitude}, #{branchVO.longitude}, #{branchVO.createDate}, #{branchVO.qrCode});
    </insert>
    
    

    <!-- QnA 답변 업데이트 쿼리 -->
    <update id="updateQnaAnswer">
        UPDATE qna
        SET qnaAnswerContent = #{qnaAnswerContent}, qnaAnswerFlag = 'y', qnaAnswerDate = NOW()
        WHERE qnaIdx = #{qnaIdx}
    </update>
    
</mapper>
