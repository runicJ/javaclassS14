<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.javaclassS14.dao.OrderDAO">

  <select id="getOrderMaxIdx" resultType="com.spring.javaclassS14.vo.OrderVO">
    SELECT MAX(orderIdx) AS orderIdx FROM orders_p
  </select>

  <select id="getCartIdx" parameterType="int" resultType="com.spring.javaclassS14.vo.CartVO">
    SELECT * FROM cart WHERE cartIdx = #{cartIdx}
  </select>
  
  <select id="getOrderCheck" resultType="int">
    SELECT * FROM order_p WHERE userIdx = #{userIdx} and productIdx = #{productIdx} limit 1;
  </select>
  
  <select id="getOrderList" resultType="com.spring.javaclassS14.vo.OrderVO">
    SELECT o.*, u.userId FROM orders_p o,users u where o.userIdx = u.userIdx order by orderIdx desc;
  </select>
  
  <select id="getOrderDelivery" parameterType="String" resultType="com.spring.javaclassS14.vo.OrderVO">
    SELECT * FROM order_delivery WHERE orderIdx = #{orderIdx}
  </select>

  <select id="getTotalDeleveryOrder" parameterType="int" resultType="int">
    SELECT SUM(totalPrice) FROM orders_p WHERE orderIdx = #{orderIdx}
  </select>
  
  <resultMap id="CartItemResultMap" type="com.spring.javaclassS14.vo.CartItem">
      <result property="productIdx" column="productIdx"/>
      <result property="optionIdx" column="optionIdx"/>
      <result property="quantity" column="quantity"/>
      <result property="isSoldOut" column="isSoldOut"/>
      <result property="addedDate" column="addedDate"/>
      <result property="productThumb" column="productThumb"/>
      <result property="productName" column="productName"/>
      <result property="productPrice" column="productPrice"/>
      <result property="optionName" column="optionName"/>
      <result property="optionGroupName" column="optionGroupName"/>
  </resultMap>

  <resultMap id="CartVOResultMap" type="com.spring.javaclassS14.vo.CartVO">
      <result property="cartIdx" column="cartIdx"/>
      <result property="userId" column="userId"/>
      <collection property="items" ofType="com.spring.javaclassS14.vo.CartItem" column="cartIdx" select="getCartItemsByCartIdx"/>
  </resultMap>

  <select id="getCartItemsByCartIdx" parameterType="int" resultMap="CartItemResultMap">
      SELECT 
          c.productIdx, c.optionIdx, c.quantity, c.isSoldOut, c.addedDate,
          p.productThumb, p.productName, p.productPrice,
          IFNULL(o.optionName, '기본') AS optionName,
          IFNULL(g.optionGroupName, '기본') AS optionGroupName
      FROM cart c
      JOIN product p ON c.productIdx = p.productIdx
      LEFT JOIN product_option o ON c.optionIdx = o.optionIdx
      LEFT JOIN product_option_group g ON o.optionGroupIdx = g.optionGroupIdx
      WHERE c.cartIdx = #{cartIdx}
  </select>
  
    <select id="getPaymentByOrderIdx" parameterType="int" resultType="com.spring.javaclassS14.vo.PaymentVO">
        SELECT * FROM delivery_address WHERE orderIdx = #{orderIdx}
    </select>
  
    <select id="getUserOrderCnt" resultType="int">
        SELECT count(*) FROM orders_p WHERE userIdx = #{userIdx}
    </select>

    <!-- 특정 사용자의 주문 상태 조회 -->
    <select id="getMyOrderStatus" parameterType="map" resultType="com.spring.javaclassS14.vo.OrderVO">
        SELECT 
            o.orderIdx,
            o.userIdx,
            o.totalPrice,
            o.couponIdx,
            o.pointUse,
            o.orderStatus,
            o.orderDate,
            p.productName,
            p.productPrice,
            p.productThumb,
            p.optionGroupName,
            p.optionName,
            p.quantity
        FROM orders_p o
        LEFT JOIN order_product p ON o.orderIdx = p.orderIdx
        WHERE o.userIdx = #{userIdx}
        
        <!-- 주문 날짜 조건 -->
        <if test="startOrder != null and startOrder != '' and endOrder != null and endOrder != ''">
            AND o.orderDate BETWEEN #{startOrder} AND #{endOrder}
        </if>

        <!-- 주문 상태 조건 -->
        <if test="conditionOrderStatus != null and conditionOrderStatus != '전체'">
            AND o.orderStatus = #{conditionOrderStatus}
        </if>

        <!-- 페이징 처리 -->
        ORDER BY o.orderDate DESC
        LIMIT #{startIndexNo}, #{pageSize}
    </select>



	<insert id="setOrder" parameterType="com.spring.javaclassS14.vo.OrderVO">
	    <selectKey keyProperty="orderIdx" order="AFTER" resultType="int">
	        SELECT LAST_INSERT_ID()
	    </selectKey>
    	INSERT INTO orders_p (userIdx, totalPrice, couponIdx, pointUse, orderStatus, orderDate, orderNumber)
	    VALUES (
	        #{userIdx}, 
	        #{totalPrice}, 
	        <if test="couponIdx != 0">
	            #{couponIdx}
	        </if>
	        <if test="couponIdx == 0">
	            NULL
	        </if>,
	        #{pointUse}, 
	        DEFAULT, 
	        DEFAULT,
	        #{orderNumber}
	    );
	</insert>

	<insert id="setOrderProduct">
	    INSERT INTO order_product (orderIdx, productIdx, orderQuantity, price, optionIdx)
	    VALUES (#{orderVO.orderIdx}, #{orderVO.productIdx}, #{orderVO.orderQuantity}, #{orderVO.price}, #{orderVO.optionIdx});
	</insert>

	<insert id="setDelivery" parameterType="com.spring.javaclassS14.vo.OrderVO">
	  INSERT INTO order_delivery VALUES (default, #{orderVO.orderIdx}, #{orderVO.receiverName}, #{orderVO.receiverTel}, #{orderVO.receiverAddress});
	</insert>



  <update id="setUserPointPlus">
    UPDATE users SET point = point + #{point} WHERE userIdx = #{userIdx}
  </update>



  <delete id="setCartDeleteAll" parameterType="int">
    DELETE FROM cart WHERE cartIdx = #{cartIdx}
  </delete>
    
</mapper>
