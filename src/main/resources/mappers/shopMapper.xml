<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.javaclassS14.dao.ShopDAO">
	
	<select id="getCategoryTop" resultType="com.spring.javaclassS14.vo.ShopVO">
		select * from product_top order by productTopIdx;
	</select>
	
	<select id="getCategoryMid" resultType="com.spring.javaclassS14.vo.ShopVO">
		select t.productTopIdx as productTopIdx, t.productTopName as productTopname, m.* from product_mid m left join product_top t on m.productTopIdx = t.productTopIdx order by t.productTopIdx, m.productMidIdx;
	</select>
	
	<select id="getCategoryTopHas" resultType="com.spring.javaclassS14.vo.ShopVO">
		select * from product_top where productTopName=#{productTopName};
	</select>
	
	<select id="getMidInTopHas" resultType="com.spring.javaclassS14.vo.ShopVO">
		select * from product_mid where productTopIdx=#{productTopIdx};
	</select>
	
	<select id="getCategoryMidHas" resultType="com.spring.javaclassS14.vo.ShopVO">
		select * from product_mid where productMidName=#{productMidName};
	</select>
	
	<select id="getProductInMidHas" resultType="com.spring.javaclassS14.vo.ShopVO">
		select * from product where productMidIdx=#{productMidIdx};
	</select>
	
  	<select id="getProductMaxIdx" resultType="com.spring.javaclassS14.vo.ShopVO">
		select * from product order by productIdx desc limit 1;
  	</select>
	
	<select id="getProductList" resultType="com.spring.javaclassS14.vo.ShopVO">
	    <!-- 전체 카테고리인 경우 -->
	    <if test='part == "전체"'>
	        <!-- 전체 정렬 -->
	        <if test='sort == "전체"'>
	            SELECT *, 
	                   (SELECT COUNT(*) FROM product) AS productCnt 
	            FROM product 
	            <where>
	                <!-- 가격 필터링 추가 -->
	                <if test='productPrice != 0'>
	                    <![CDATA[productPrice < #{productPrice}]]>
	                </if>
	                <!-- 가격 범위 필터링 추가 -->
	                <if test='minPrice != 0 or maxPrice != 0'>
	                    <![CDATA[
	                        productPrice BETWEEN #{minPrice} AND #{maxPrice}
	                    ]]>
	                </if>
	            </where>
	            ORDER BY productIdx DESC;
	        </if>
	        <!-- 특정 정렬 옵션 -->
	        <if test='sort != "전체"'>
	            SELECT *, 
	                   (SELECT COUNT(*) FROM product) AS productCnt 
	            FROM product 
	            <where>
	                <!-- 가격 필터링 추가 -->
	                <if test='productPrice != 0'>
	                    <![CDATA[productPrice < #{productPrice}]]>
	                </if>
	                <!-- 가격 범위 필터링 추가 -->
	                <if test='minPrice != 0 or maxPrice != 0'>
	                    <![CDATA[
	                        productPrice BETWEEN #{minPrice} AND #{maxPrice}
	                    ]]>
	                </if>
	            </where>
	            <choose>
	                <when test='sort == "likedCnt"'>
	                    ORDER BY likedCnt DESC
	                </when>
	                <when test='sort == "productPrice"'>
	                    ORDER BY productPrice
	                </when>
	                <when test='sort == "productPrice desc"'>
	                    ORDER BY productPrice DESC
	                </when>
	                <otherwise>
	                    ORDER BY productIdx DESC
	                </otherwise>
	            </choose>
	        </if>
	    </if>
	    <!-- 특정 카테고리인 경우 -->
	    <if test='part != "전체"'>
	        <!-- 전체 정렬 -->
	        <if test='sort == "전체"'>
	            SELECT *, 
	                   (SELECT COUNT(*) FROM product WHERE productMidIdx=#{part}) AS productCnt 
	            FROM product 
	            WHERE productMidIdx=#{part}
	            <if test='productPrice != 0'>
	                AND <![CDATA[productPrice < #{productPrice}]]>
	            </if>
	            <if test='minPrice != 0 or maxPrice != 0'>
	                AND <![CDATA[
	                    productPrice BETWEEN #{minPrice} AND #{maxPrice}
	                ]]>
	            </if>
	            ORDER BY productIdx DESC;
	        </if>
	        <!-- 특정 정렬 옵션 -->
	        <if test='sort != "전체"'>
	            SELECT *, 
	                   (SELECT COUNT(*) FROM product WHERE productMidIdx=#{part}) AS productCnt 
	            FROM product 
	            WHERE productMidIdx=#{part}
	            <if test='productPrice != 0'>
	                AND <![CDATA[productPrice < #{productPrice}]]>
	            </if>
	            <if test='minPrice != 0 or maxPrice != 0'>
	                AND <![CDATA[
	                    productPrice BETWEEN #{minPrice} AND #{maxPrice}
	                ]]>
	            </if>
	            <choose>
	                <when test='sort == "likedCnt"'>
	                    ORDER BY likedCnt DESC
	                </when>
	                <when test='sort == "productPrice"'>
	                    ORDER BY productPrice
	                </when>
	                <when test='sort == "productPrice desc"'>
	                    ORDER BY productPrice DESC
	                </when>
	                <otherwise>
	                    ORDER BY productIdx DESC
	                </otherwise>
	            </choose>
	        </if>
	    </if>
	</select>

 		
  	<select id="getProductNameOne" resultType="com.spring.javaclassS14.vo.ShopVO">
		select * from product where productName=#{productName};
  	</select>
  	
 	<select id="getProductNameOneVO" resultType="com.spring.javaclassS14.vo.ShopVO">
	    <!-- select * from dbProduct where productName = #{productName}; --> 
	    select *,(select productTopName from product_top where productTopIdx=#{vo.productTopIdx}) as productTopName,
	      (select productMidName from product_mid where productMidIdx=#{vo.productMidIdx}) as productMidName,
	      from product where productName = #{vo.productName}; 
  	</select>

  	<select id="getProductName" resultType="com.spring.javaclassS14.vo.ShopVO">
		select * from product where productTopIdx=#{productTopIdx} and productMidIdx=#{productMidIdx};
  	</select>
  	
	<select id="getProductInfo" resultType="com.spring.javaclassS14.vo.ShopVO">
	  	select product.*, top.productTopName, mid.productMidName
	  	from product, product_top top, product_mid mid
	  	where productIdx=#{productIdx} order by productIdx limit 1;
  	</select>
  	
  	<select id="getOptionList" resultType="com.spring.javaclassS14.vo.ShopVO">
  		select g.optiongroupIdx, g.optionGroupName, o.optionIdx, o.optionName from product_option_group as g left join product_option as o on g.optionGroupIdx=o.optionGroupIdx where g.productIdx=#{productIdx} order by g.optionGroupIdx, o.optionIdx;
  	</select>
  	
  	<select id="getOptionGroupSame" resultType="int">
  		select count(*) FROM product_option_group where productIdx = #{productIdx} AND optionGroupName = #{optionGroupName};
  	</select>
  	
  	<select id="getOptionSame" resultType="int">
  		select count(*) FROM product_option where optionGroupIdx = #{optionGroupIdx} AND optionName = #{optionName};
  	</select>
  	
  	<select id="getOptionGroup" resultType="com.spring.javaclassS14.vo.ShopVO">
  		select * FROM product_option_group where productIdx = #{productIdx} order by optionGroupIdx;
  	</select>
  	
 	<select id="getOptionHas" resultType="int">
  		select count(*) FROM product_option where optionGroupIdx = #{optionGroupIdx};
  	</select>
  	
 	<select id="getProduct" resultType="com.spring.javaclassS14.vo.ShopVO">
  		select * FROM product where productIdx = #{productIdx};
  	</select>
  	
 	<select id="getAllOption" resultType="com.spring.javaclassS14.vo.ShopVO">
  		select g.optiongroupIdx, g.optionGroupName, o.optionIdx, o.optionName, o.addPrice from product_option_group as g left join product_option as o on g.optionGroupIdx=o.optionGroupIdx where g.productIdx=#{productIdx} order by g.optionGroupIdx, o.optionIdx;
  	</select>
  	
 	<select id="getNewProduct" resultType="com.spring.javaclassS14.vo.ShopVO">
  		select *,datediff(createdDate, now()) as createDiff from product order by createdDate desc limit 6;
  	</select>
  	  	
 	<select id="getProductTopMidList" resultType="com.spring.javaclassS14.vo.ShopVO">
  		select t.*, m.productMidIdx, m.productMidName, (select count(*) from product as p where p.productMidIdx = m.productMidIdx) as productCnt from product_top as t left join product_mid as m on t.productTopIdx = m.productTopIdx;
  	</select>
  	
	<!-- CartItem의 ResultMap 정의 -->
    <resultMap id="CartItemResultMap" type="com.spring.javaclassS14.vo.CartItem">
        <result property="productIdx" column="productIdx"/>
        <result property="optionIdx" column="optionIdx"/>
        <result property="quantity" column="quantity"/>
        <result property="isSoldOut" column="isSoldOut"/>
        <result property="addedDate" column="addedDate"/>
        <result property="productThumb" column="productThumb"/>
        <result property="productName" column="productName"/>
        <result property="productPrice" column="productPrice"/>
        <result property="optionName" column="optionName"/> <!-- 추가 -->
    	<result property="optionGroupName" column="optionGroupName"/> <!-- 추가 -->
    	<result property="productTags" column="productTags"/> <!-- 추가 -->
    </resultMap>

    <!-- CartVO의 ResultMap 정의 -->
    <resultMap id="CartVOResultMap" type="com.spring.javaclassS14.vo.CartVO">
        <result property="cartIdx" column="cartIdx"/>
        <result property="userId" column="userId"/>
        <collection property="items" ofType="com.spring.javaclassS14.vo.CartItem" resultMap="CartItemResultMap"/>
    </resultMap>

    <!-- 장바구니 항목 가져오기 -->
	<select id="getProductCart" resultMap="CartVOResultMap">
	    SELECT 
	        c.cartIdx,
	        c.userId,
	        c.productIdx,
	        c.optionIdx,
	        IFNULL(o.optionName, '기본') AS optionName, <!-- optionIdx가 없을 경우 '기본'으로 처리 -->
	        IFNULL(g.optionGroupName, '기본') AS optionGroupName, <!-- optionIdx가 없을 경우 '기본'으로 처리 -->
	        c.quantity,
	        c.isSoldOut,
	        c.addedDate,
	        p.productThumb,
	        p.productName,
	        p.productPrice,
	        p.productTags
	    FROM 
	        cart c
	    JOIN
	        product p ON c.productIdx = p.productIdx
	    LEFT JOIN
	        product_option o ON c.optionIdx = o.optionIdx
	    LEFT JOIN
	        product_option_group g ON o.optionGroupIdx = g.optionGroupIdx
	    WHERE 
	        c.userId = #{userId}
	</select>

	<select id="getCartProductOptionSearch" resultType="com.spring.javaclassS14.vo.CartItem">
	    SELECT productIdx, optionIdx, quantity, isSoldOut, addedDate
	    FROM cart
	    WHERE productIdx = #{productIdx} AND optionIdx = #{optionIdx} AND userId = #{userId}
	</select>
	
    <!-- productIdx 존재 여부 확인 -->
    <select id="checkProductExists" resultType="int">
        SELECT COUNT(*) FROM product WHERE productIdx = #{productIdx}
    </select>

    <!-- optionIdx 존재 여부 확인 -->
    <select id="checkOptionExists" resultType="int">
        SELECT COUNT(*) FROM product_option WHERE optionIdx = #{optionIdx}
    </select>
    
    <select id="getUserCartCnt" resultType="int">
        SELECT COUNT(*) FROM cart WHERE userId = #{userId}
    </select>
    
    <select id="getAllReview" resultType="com.spring.javaclassS14.vo.ReviewVO">
        SELECT *, u.userImage, (select count(*) from productReview where pr.productIdx = #{productIdx}) as productReviewCnt 
        FROM productReview pr, users u WHERE pr.productIdx = #{productIdx} and pr.userId = u.userId order by pr.re_order;
    </select>
    
	<select id="getProductParentReviewCheck" resultType="com.spring.javaclassS14.vo.ReviewVO">
	  select * from productReview where productIdx = #{productIdx} order by idx desc limit 1;
	</select>
    
	<select id="getRelatedProducts" parameterType="map" resultType="com.spring.javaclassS14.vo.ShopVO">
		select * from product where 
		<foreach collection="tags" item="tag" separator=" OR ">
			productTags like concat('%',#{tag},'%')
		</foreach>
		order by favoriteCount desc, createdDate desc limit 4;
	</select>



	<insert id="setCategoryTopInput">
		insert into product_top values (default, #{productTopName}, default, default);
	</insert>

	<insert id="setCategoryMidInput">
		insert into product_mid values (default, #{productTopIdx}, #{productMidName});
		update product_top set hasMid='y' where productTopIdx=#{productTopIdx};
	</insert>
	 	
 	<insert id="setProductInput">
    	insert into product values (default,#{vo.productCode},#{vo.productName},#{vo.productDetails},default,#{vo.productPrice},default,default,default,default,default,default,#{vo.productBrand},#{vo.productCountry},default,#{vo.productThumb},#{vo.shipAddress},default,#{vo.productTags},0,default,default,default,#{vo.productTopIdx},#{vo.productMidIdx},#{vo.content});
 	</insert>
	 	
 	<insert id="setOptionGroupInput">
    	insert into product_option_group values (default,#{productIdx},#{optionGroupName});
 	</insert>
	 	
	<insert id="setOptionInput">
	    insert into product_option values (default, #{optionGroupIdx}, #{optionName}, COALESCE(#{addPrice}, 0));
	</insert>
	
	<insert id="setShopCartInput">
	  insert into cart values (default,#{vo.userId},#{vo.productIdx},#{vo.quantity},default,default,#{vo.optionIdx});
	</insert>
	
    <!-- 장바구니에 항목 추가 -->
    <insert id="addCart">
        INSERT INTO cart VALUES (default, #{userId}, #{cartItem.productIdx}, #{cartItem.quantity}, default, #{cartItem.isSoldOutAsString}, 
        <if test="cartItem.optionIdx != 0">
            #{cartItem.optionIdx}
        </if>
        <if test="cartItem.optionIdx == 0">
            default
        </if>)
    </insert>

	<insert id="setProductReviewInput">
	  insert into productReview values (default,#{reviewVO.productIdx},#{reviewVO.userId},#{reviewVO.nickName},#{reviewVO.orderIdx},#{reviewVO.re_step},#{reviewVO.re_order},#{reviewVO.star},#{reviewVO.reviewContent},default);
	</insert>
	
	<insert id="setNoticeInput">
    	insert into notice values (default,#{csworkVO.noticeTitle},#{csworkVO.content},default,#{csworkVO.noticeStatus});
 	</insert>



    <!-- 장바구니 항목 업데이트 -->
    <update id="updateCart">
        UPDATE cart
        SET quantity = #{cartItem.quantity}, isSoldOut = #{cartItem.isSoldOutAsString}
        WHERE productIdx = #{cartItem.productIdx} AND optionIdx = #{cartItem.optionIdx} AND userId = #{userId}
    </update>
    
   	<update id="setReviewOrderUpdate">
	  update productReview set re_order = re_order + 1 where productIdx = #{productIdx} and re_order > #{re_order};
	</update>
    
    
    
	<delete id="setCategoryTopDelete">
		delete from product_mid where productTopIdx=#{productTopIdx};
	</delete>
	
	<delete id="setoptionGroupDelete">
		delete from product_option_group where optionGroupIdx=#{optionGroupIdx};
	</delete>
	
	<delete id="setOptionDelete">
		delete from product_option where optionIdx=#{optionIdx};
	</delete>
	
    <!-- 장바구니에서 특정 항목 삭제 -->
    <delete id="setProductCartDelete" parameterType="int">
        DELETE FROM cart WHERE cartIdx = #{cartIdx}
    </delete>
    
    <delete id="setProductReviewDelete" parameterType="int">
        DELETE FROM productReview WHERE reviewIdx = #{reviewIdx}
    </delete>
	
</mapper>