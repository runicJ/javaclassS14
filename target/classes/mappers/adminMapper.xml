<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.javaclassS14.dao.AdminDAO">

<select id="getUserList" parameterType="map" resultType="com.spring.javaclassS14.vo.UserVO">
    SELECT * 
    FROM users
    WHERE level > 0
    <if test="keyword != null and keyword != ''">
        AND (name LIKE CONCAT('%', #{keyword}, '%') OR userId LIKE CONCAT('%', #{keyword}, '%'))
    </if>
    <if test="numericOption != null">
        <if test="numericOption == 3">
            AND level = 3
        </if>
        <if test="numericOption == 2">
            AND level = 2
        </if>
        <if test="numericOption == 1">
            AND level = 1
        </if>
        <if test="numericOption == 0.5">
            AND level = 0.5
        </if>
    </if>
    <if test="stringOption != null">
        <if test='stringOption == "정상"'>
            AND userStatus = 'on'
        </if>
        <if test='stringOption == "탈퇴"'>
            AND userStatus = 'off'
        </if>
        <if test='stringOption == "정지"'>
            AND userStatus = 'stop'
        </if>
     </if>
    ORDER BY ${orderBy}
    LIMIT #{startIndexNo}, #{pageSize};
</select>

<update id="updateUser">
    UPDATE users
    <set>
        <if test="userPwd != null">userPwd = #{userPwd},</if>
        <if test="name != null">name = #{name},</if>
        <if test="nickName != null">nickName = #{nickName},</if>
        <if test="email != null">email = #{email},</if>
        <if test="tel != null">tel = #{tel},</if>
        <if test="userImage != null">userImage = #{userImage},</if>
        <if test="gender != null">gender = #{gender},</if>
        <if test="registerWay != null">registerWay = #{registerWay},</if>
        <if test="userStatus != null">userStatus = #{userStatus},</if>
        <if test="level != null">level = #{level},</if>
        <if test="point != null">point = #{point},</if>
        policyFlag = #{policyFlag},
        updateDate = NOW()
    </set>
    WHERE userId = #{userId}
</update>

 	<select id="getDeleteUserList" resultType="com.spring.javaclassS14.vo.UserVO">
 		select *, datediff(deleteDate, now()) as deleteDiff from delete_users order by deleteIdx desc limit #{startIndexNo},#{pageSize};
 	</select>

 	<select id="getDeleteExUser" resultType="int">
 		select count(*) from delete_users where datediff(deleteDate, now()) <![CDATA[<=]]> -30;
 	</select>

 	<select id="getRecentUser" resultType="int">
 		select count(*) from users where userStatus = 'on';
 	</select>

 	<select id="getDeleteResUser" resultType="int">
 		select count(*) from users where userStatus = 'off';
 	</select>

 	<select id="getUserRegisterWay" resultType="com.spring.javaclassS14.vo.UserVO">
 		select registerWay, count(*) as wayCount from users group by registerWay;
 	</select>

 	<select id="getOrderStatusCnt" resultType="int">
 		select count(*) from orders_p where orderStatus=#{orderStatus};
 	</select>

 	<select id="getQnaCnt" resultType="int">
	    select count(*) from qna where qnaAnswerFlag = 'n'
	    <if test="email == 'all'">
	        <!-- 모든 QnA -->
	    </if>
	    <if test="email == 'null'">
	        <!-- 이메일이 null인 경우 -->
	        and email IS NULL
	    </if>
	    <if test="email != 'null' and email != 'all'">
	        <!-- 특정 이메일에 대한 경우 -->
	        and email IS NOT NULL
	    </if>
 	</select>

 	<select id="getProductQnaCnt" resultType="int">
 		select count(*) from product_qna where answerFlag='n';
 	</select>
 	
 	<select id="getUserById" resultType="com.spring.javaclassS14.vo.UserVO">
 		select * from users where userId = #{userId};
 	</select>
 	
    <!-- 주별 매출 데이터 -->
    <select id="getWeeklySales" resultType="map">
        SELECT YEAR(orderDate) AS year,
               WEEK(orderDate, 1) AS week,
               SUM(totalPrice) AS total_sales
        FROM orders_p
        WHERE orderStatus IN ('주문', '배송', '완료')
        GROUP BY year, week
        ORDER BY year, week
    </select>

    <!-- 요일별 매출 데이터 -->
    <select id="getDailySales" resultType="map">
        SELECT DAYOFWEEK(orderDate) AS day_of_week,
               SUM(totalPrice) AS total_sales
        FROM orders_p
        WHERE orderStatus IN ('주문', '배송', '완료')
        GROUP BY day_of_week
        ORDER BY day_of_week
    </select>

    <select id="getMailUser" resultType="com.spring.javaclassS14.vo.UserVO">
        SELECT u.userIdx, u.userId, u.name, u.createDate, 
               IFNULL(DATEDIFF(NOW(), ul.loginTime), DATEDIFF(NOW(), u.createDate)) AS lastLogin,
               ul.loginTime
        FROM users u
        LEFT JOIN user_log ul ON u.userIdx = ul.userIdx
        WHERE u.level > 0 AND u.userStatus = 'on'
        ORDER BY lastLogin DESC limit 5;
    </select>
 	
 	
	<update id="getDeleteUser">
	    <if test="delFlag == 'Ok'">
	        update delete_users 
	        set userId = CONCAT('del_', userId), 
	            email = CONCAT('del_', email) 
	        where userId = #{userId};
	        delete from users where userId = #{userId};
	    </if>
	    <if test="delFlag != 'Ok'">
	        update users set userStatus = 'on' where userId = #{userId};
	        delete from delete_users where userId = #{userId};
	    </if>
	</update>

	<update id="updateUserStatus">
	    UPDATE users SET userStatus = #{userStatus} WHERE userId = #{userId}
	</update>
	
	<update id="deleteUser">
	    update users set level=99, userStatus='off' where userId=#{userId};
	    insert into delete_users (userId, deleteReason, deleteDate) values (#{userId}, '관리자', default);
	</update>
</mapper>