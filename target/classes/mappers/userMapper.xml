<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.javaclassS14.dao.UserDAO">

	<select id="getUserIdCheck" resultType="com.spring.javaclassS14.vo.UserVO">
		select * from users where userId=#{userId};
	</select>
	
	<select id="getUserNickCheck" resultType="com.spring.javaclassS14.vo.UserVO">
		select * from users where nickName=#{nickName};
	</select>
	
	<select id="getUserEmailCheck" resultType="com.spring.javaclassS14.vo.UserVO">
		select * from users where email=#{email};
	</select>

	<select id="getUserNickNameEmailCheck" resultType="com.spring.javaclassS14.vo.UserVO">
		select * from users where nickName = #{nickName} and email = #{email} limit 1;
	</select>
	
	<select id="totRecCnt" resultType="int">
		select count(*) from users;
	</select>
	
	<select id="totRecCntSearch"  resultType="int">
		select count(*) from users where ${search} like concat("%",#{searchString},"%"); 
	</select>
	
	<select id="recentLog" resultType="int">
		select count(*) as recentLog from user_log where userId=#{userId} and loginTime > DATE_SUB(NOW(), INTERVAL 1 HOUR);
	</select>
	
	<select id="getBookmarkList" resultType="com.spring.javaclassS14.vo.SaveMypageVO">
		select * from bookmark where userId=#{userId};
	</select>
	
	<select id="checkUserBookmark" resultType="int">
	    select count(*) from bookmark where userId=#{userId} and partUrl=#{partUrl};
	</select>


	<insert id="setUserRegisterOk">
		insert into users values (default,#{vo.userId},#{vo.userPwd},#{vo.name},#{vo.nickName},#{vo.gender},#{vo.email},#{vo.tel},#{vo.userImage},#{vo.registerWay},default,#{vo.policyFlag},default,default,default,default);
	</insert>
	
	<insert id="setKakaoUserInput">
		insert into users (userId, userPwd, nickName, name, email) values (#{userId},#{userPwd},#{nickName},#{nickName},#{email});
	</insert>
	
	<insert id="setUserLog">
		insert into user_log (userId, hostIp) values (#{userId},#{hostIp});
	</insert>
	
    <insert id="insertDeletedUser">
        insert into delete_users (userId, email, deleteReason) values (#{userId}, #{email}, #{deleteReason});
    </insert>
    
    <insert id="saveBookmarkToggle">
    	<choose>
    		<when test="bookmark">
    			insert into bookmark (userId, partUrl) values (#{userId}, #{partUrl})
    		</when>
    		<otherwise>
    			delete from bookmark where userId=#{userId} and partUrl=#{partUrl}
    		</otherwise>
    	</choose>
    </insert>

	
	<update id="setUserPwdUpdate">
		update users set userPwd=#{userPwd} where userId=#{userId};
	</update>
	
	<update id="setUserDelete">
	    update users set level=99, userStatus='off', deleteRequested=true, deleteRequestDate=NOW() where userId=#{userId};
	    insert into delete_users (userId, deleteReason, deleteDate) values (#{userId}, #{deleteReason}, NOW());
	</update>
    
    <!-- <update id="setUserDelete">
        update users set level=99, userStatus='off' where userId=#{userId};
    </update>

    <insert id="insertDeletedUser">
        insert into delete_users (userId, deleteReason) values (#{userId}, #{deleteReason});
    </insert>
 -->
 
     <update id="updateDeletedUser">
        update delete_users set userId = concat('delete_', userId), email = concat('delete_', email) where userId = #{userId} and deleteDate <![CDATA[ < ]]> DATE_SUB(NOW(), INTERVAL 1 MONTH);
    </update>
    
    <update id="cancelUserDelete">
	    update users set level=1, userStatus='active', deleteRequested=false, deleteRequestDate=null where userId=#{userId};
	</update>
	
	<update id="updateUser">
		update users set userPwd=#{vo.userPwd}, name=#{vo.name}, nickName=#{vo.nickName}, email=#{vo.email}, tel=#{vo.tel}, userImage=#{vo.userImage}, policyFlag=#{vo.policyFlag} where userId=#{vo.userId};
	</update>
    

    <select id="getAllDeletedUsers" resultType="com.spring.javaclassS14.vo.UserVO">
        select * from delete_users where deleteDate <![CDATA[ < ]]> DATE_SUB(NOW(), INTERVAL 1 MONTH);
    </select>
</mapper>