<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.javaclassS14.dao.UserDAO">

	<select id="getUserIdCheck" resultType="com.spring.javaclassS14.vo.UserVO">
		select * from users where userId=#{userId};
	</select>
	
	<select id="getUserNickCheck" resultType="com.spring.javaclassS14.vo.UserVO">
		select * from users where nickName=#{nickName};
	</select>
	
	<select id="getUserEmailCheck" resultType="int">
		select count(*) from users where email=#{email};
	</select>
	
	<select id="getUserCheck" resultType="com.spring.javaclassS14.vo.UserVO">
		select * from users where name=#{name} and email=#{email};
	</select>

	<select id="getUserNickNameEmailCheck" resultType="com.spring.javaclassS14.vo.UserVO">
		select * from users where nickName = #{nickName} and email = #{email} limit 1;
	</select>
	
	<select id="totRecCnt" resultType="int">
	    select count(*) from users;
	</select>
	
	<select id="totRecCntOption" parameterType="map" resultType="int">
	<choose>
	    <when test="stringOption != null">
	        <choose>
	            <when test="stringOption == '정상'">
	                select count(*) from users where userStatus = 'on'
	            </when>
	            <when test="stringOption == '탈퇴'">
	                select count(*) from users where userStatus = 'off'
	            </when>
	            <when test="stringOption == '정지'">
	                select count(*) from users where userStatus = 'stop'
	            </when>
	            <otherwise>
	                select count(*) from users where 1=1
	            </otherwise>
	        </choose>
	    </when>
	    <when test="numericOption != null">
	        <choose>
	            <when test="numericOption == 3">
	                select count(*) from users where level = 3
	            </when>
	            <when test="numericOption == 2">
	                select count(*) from users where level = 2
	            </when>
	            <when test="numericOption == 1">
	                select count(*) from users where level = 1
	            </when>
	            <when test="numericOption == 0.5">
	                select count(*) from users where level = 0.5
	            </when>
	            <otherwise>
	                select count(*) from users where 1=1
	            </otherwise>
	        </choose>
	    </when>
	    <otherwise>
	        select count(*) from users where 1=1
	    </otherwise>
	</choose>
	</select>

	<select id="totRecCntKeyword" resultType="int">
	    select count(*) from users
	    <where>
	        name LIKE CONCAT('%', #{keyword}, '%') OR userId LIKE CONCAT('%', #{keyword}, '%') OR nickName LIKE CONCAT('%', #{keyword}, '%')
	    </where>
	</select>
	
	<select id="recentLog" resultType="int">
		select count(*) as recentLog from user_log where userIdx=#{userIdx} and loginTime > DATE_SUB(NOW(), INTERVAL 1 HOUR);
	</select>
	
	<select id="getBookmarkList" resultType="com.spring.javaclassS14.vo.SaveInterestVO">
		select * from bookmark where userIdx=#{userIdx};
	</select>
	
	<select id="checkUserBookmark" resultType="int">
	    select count(*) from bookmark where userIdx=#{userIdx} and partUrl=#{partUrl};
	</select>
	
	<select id="getRecentOrders"  resultType="com.spring.javaclassS14.vo.OrderVO">
	    select * from orders_p where userIdx=#{userIdx} order by orderIdx desc limit 5;
	</select>
	
	<select id="getLikedProducts"  resultType="com.spring.javaclassS14.vo.SaveInterestVO">
	    select l.*, p.productName, p.productPrice, p.productStock from liked_product l join product p on l.productIdx = p.productIdx where l.userIdx=#{userIdx} order by l.likedIdx desc limit 5;
	</select>

    <select id="getRecentViewProduct" resultType="map">
        SELECT p.* FROM recent_view_product v
        JOIN product p ON v.productIdx = p.productIdx
        WHERE v.userIdx = #{userIdx}
        ORDER BY v.viewIdx DESC LIMIT 5
    </select>
    
    <select id="getUserCouponCnt"  resultType="int">
	    select count(*) from userCoupon where userIdx=#{userIdx};
	</select>	
	
	<select id="getUserPointCnt" resultType="int">
	    select point from users where userIdx=#{userIdx};
	</select>
	
	<select id="getLikedCnt" resultType="int">
	    select count(*) from liked_product where userIdx=#{userIdx};
	</select>
	
	<select id="getUserDeliveryAddresses" parameterType="int" resultType="com.spring.javaclassS14.vo.DeliveryAddressVO">
		SELECT * FROM delivery_address WHERE userIdx=#{userIdx}
	</select>


	<insert id="setUserRegisterOk">
		insert into users values (default,#{vo.userId},#{vo.userPwd},#{vo.name},#{vo.nickName},#{vo.gender},#{vo.email},#{vo.tel},#{vo.userImage},#{vo.registerWay},default,#{vo.policyFlag},default,default,default,default);
	</insert>
	
	<insert id="setKakaoUserInput">
		insert into users (userId, userPwd, nickName, name, email) values (#{userId},#{userPwd},#{nickName},#{nickName},#{email});
	</insert>
	
	<insert id="setUserLog">
		insert into user_log (userIdx, hostIp) values (#{userIdx},#{hostIp});
	</insert>
	
    <insert id="insertDeletedUser">
        insert into delete_users (userIdx, email, deleteReason) values (#{userIdx}, #{email}, #{deleteReason});
    </insert>
    
    <insert id="insertAddress">
    	INSERT INTO delivery_address (userIdx, recipientName, address1)
    </insert>

	
	<update id="setUserPwdUpdate">
		update users set userPwd=#{userPwd} where userId=#{userId};
	</update>
	
	<update id="setUserDelete">
	    update users set level=999, userStatus='off' where userId=#{userId};
	    insert into delete_users (userId, email, deleteReason, deleteDate) values (#{userId}, #{email}, #{deleteReason}, NOW());
	</update>
 
     <update id="updateDeletedUser">
        update users 
        set userId = concat('delete_', userId), 
        	userPwd = 'deleted_password',
        	name = '탈퇴한 회원',
        	email = concat('delete_', userIdx, '@deleted.com'),
        	tel = '000-0000-0000',
        	userStatus = 'delete',
        where userIdx IN (SELECT userIdx FROm delete_users WHERE deleteDate <![CDATA[ < ]]> DATE_SUB(NOW(), INTERVAL 1 MONTH));
        delete from users where userId = #{userId};
    </update>
    
    <update id="cancelUserDelete">
	    update users set level=1, userStatus='active', deleteRequested=false, deleteRequestDate=null where userId=#{userId};
	</update>
	
	<update id="setUserUpdate">
	    UPDATE users
	    <set>
	        <if test="vo.userPwd != null">userPwd = #{vo.userPwd},</if>
	        <if test="vo.name != null">name = #{vo.name},</if>
	        <if test="vo.nickName != null">nickName = #{vo.nickName},</if>
	        <if test="vo.gender != null">gender = #{vo.gender},</if>
	        <if test="vo.email != null">email = #{vo.email},</if>
	        <if test="vo.tel != null">tel = #{vo.tel},</if>
	        <if test="vo.userImage != null">userImage = #{vo.userImage},</if>
	        <if test="vo.registerWay != null">registerWay = #{vo.registerWay},</if>
	        updateDate = default,
	        <if test="vo.policyFlag != null">policyFlag = #{vo.policyFlag},</if>
	    </set>
	    WHERE userId = #{vo.userId}
	</update>

	<update id="setUpdateUser">
	    UPDATE users
	    <set>
	        <if test="vo.userPwd != null">
	            userPwd = #{vo.userPwd},
	        </if>
	        <if test="vo.name != null">
	            name = #{vo.name},
	        </if>
	        <if test="vo.nickName != null">
	            nickName = #{vo.nickName},
	        </if>
	        <if test="vo.gender != null">
	            gender = #{vo.gender},
	        </if>
	        <if test="vo.email != null">
	            email = #{vo.email},
	        </if>
	        <if test="vo.tel != null">
	            tel = #{vo.tel},
	        </if>
	        <if test="vo.userImage != null">
	            userImage = #{vo.userImage},
	        </if>
	        <if test="vo.registerWay != null">
	            registerWay = #{vo.registerWay},
	        </if>
	        <if test="vo.point != null">
	            point = #{vo.point},
	        </if>
	        <if test="vo.policyFlag != null">
	            policyFlag = #{vo.policyFlag},
	        </if>
	        <if test="vo.level != null">
	            level = #{vo.level},
	        </if>
	        <if test="vo.userStatus != null">
	            userStatus = #{vo.userStatus},
	        </if>
	    </set>
	    WHERE userId = #{vo.userId}
	</update>
    
</mapper>